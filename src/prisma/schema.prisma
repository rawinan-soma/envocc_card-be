generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model access_levels {
  level_id           Int      @id @unique(map: "level_id")
  validate_documents Int?
  authorize_users    Int?
  add_card           Int?
  add_institution    Int?
  add_admin          Int?
  add_seal           Int?
  add_document       Int?
  data_institution   Int?
  data_province      Int?
  data_region        Int?
  data_nation        Int?
  admins             admins[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model admins {
  admin_id          Int                 @id @unique(map: "admin_id") @default(autoincrement())
  role              String              @default("admin")
  username          String              @unique @db.VarChar(255)
  password          String              @db.VarChar(255)
  institution       Int
  level             Int
  pname             String              @db.VarChar(255)
  fname             String              @db.VarChar(255)
  lname             String              @db.VarChar(255)
  private_number    String              @db.VarChar(255)
  work_number       String
  email             String              @unique @db.VarChar(255)
  position          Int
  position_lv       Int
  create_date       DateTime            @default(now()) @db.DateTime(0)
  access_levels     access_levels       @relation(fields: [level], references: [level_id], onDelete: NoAction, onUpdate: NoAction, map: "admins_ibfk_1")
  institutions      institutions        @relation(fields: [institution], references: [institution_id], onDelete: NoAction, onUpdate: NoAction, map: "admins_ibfk_2")
  experiences_files experiences_files[]
  requests          requests[]
  positions         positions           @relation(fields: [position], references: [position_id])
  position_lvs      position_lvs        @relation(fields: [position_lv], references: [position_lv_id])

  @@index([institution], map: "institution")
  @@index([level], map: "level")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model departments {
  department_id       Int            @id @unique(map: "department_id")
  department_name_th  String         @db.VarChar(255)
  department_name_eng String         @db.VarChar(255)
  ministry            Int
  department_seal     Int            @unique(map: "department_seal")
  ministries          ministries     @relation(fields: [ministry], references: [ministry_id], onDelete: NoAction, onUpdate: NoAction, map: "departments_ibfk_1")
  seals               seals          @relation(fields: [department_seal], references: [seal_id], onDelete: NoAction, onUpdate: NoAction, map: "departments_ibfk_2")
  institutions        institutions[]
  sign_persons        sign_persons[]

  @@index([ministry], map: "ministry")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model documents {
  doc_id      Int       @id @unique(map: "doc_id") @default(autoincrement())
  doc_type    Int?
  doc_name    String?   @unique @db.VarChar(255)
  create_date DateTime? @default(now()) @db.DateTime(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model envocc_card_files {
  envocc_card_file_id Int       @id @unique(map: "envocc_card_file_id") @default(autoincrement())
  user                Int?
  file_card_name      String?   @unique @db.VarChar(255)
  create_date         DateTime? @default(now()) @db.DateTime(0)
  users               users?    @relation(fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "envocc_card_files_ibfk_1")

  @@index([user], map: "user")
}

model epositions {
  eposition_id       Int          @id @unique(map: "eposition_id")
  eposition_name_th  String       @db.VarChar(255)
  eposition_name_eng String       @db.VarChar(255)
  institution        Int
  institutions       institutions @relation(fields: [institution], references: [institution_id])
  users              users[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model exp_files {
  exp_file_id Int       @id @unique(map: "exp_file_id") @default(autoincrement())
  user        Int?
  file_name   String?   @unique @db.VarChar(255)
  create_date DateTime? @default(now()) @db.DateTime(0)
  users       users?    @relation(fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "exp_files_ibfk_1")

  @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model experiences {
  exp_id         Int       @id @unique(map: "exp_id") @default(autoincrement())
  user           Int?
  exp_fdate      DateTime? @db.Date
  exp_ldate      DateTime? @db.Date
  exp_years      Int?
  exp_typeoffice Int?
  exp_office     String?   @db.VarChar(255)
  exp_position   String?   @db.VarChar(255)
  exp_work       String?   @db.VarChar(255)
  create_date    DateTime? @default(now()) @db.DateTime(0)
  users          users?    @relation(fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "experience_ibfk_1")

  @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model experiences_files {
  experience_file_id Int       @id @unique(map: "experience_file_id") @default(autoincrement())
  admin              Int?
  exp_file           String?   @unique @db.VarChar(255)
  create_date        DateTime? @default(now()) @db.DateTime(0)
  admins             admins?   @relation(fields: [admin], references: [admin_id], onDelete: NoAction, onUpdate: NoAction, map: "experiences_files_ibfk_1")

  @@index([admin], map: "admin")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model gov_card_files {
  gov_card_file_id Int       @id @unique(map: "gov_card_file_id") @default(autoincrement())
  user             Int?
  file_name        String?   @unique @db.VarChar(255)
  create_date      DateTime? @default(now()) @db.DateTime(0)
  users            users?    @relation(fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "gov_card_files_ibfk_1")

  @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model institutions {
  institution_id       Int          @id @unique(map: "institution_id")
  institution_code     String       @db.VarChar(10)
  institution_name_th  String       @db.VarChar(255)
  institution_name_eng String       @db.VarChar(255)
  department           Int
  province             Int
  health_region        Int
  admins               admins[]
  departments          departments  @relation(fields: [department], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "institutions_ibfk_1")
  users                users[]
  epositions           epositions[]

  @@index([department], map: "department")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model members {
  member_id   Int      @unique @default(autoincrement())
  member_no   Int?
  user        Int      @unique(map: "user")
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  qrcode      String   @db.VarChar(255)
  qrcode_pass String   @db.VarChar(255)
  signer      Int
  is_active   Boolean  @default(true)
  num_print   Int      @default(2)
  users       users    @relation(fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "members_ibfk_1")

  @@id([member_id, start_date])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ministries {
  ministry_id       Int           @id @unique(map: "ministry_id")
  ministry_name_th  String        @db.VarChar(255)
  ministry_name_eng String        @db.VarChar(255)
  departments       departments[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model photos {
  photo_id    Int       @id @unique(map: "photo_id") @default(autoincrement())
  user        Int?
  photo       String?   @unique @db.VarChar(255)
  create_date DateTime? @default(now()) @db.DateTime(0)
  users       users?    @relation(fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "photos_ibfk_1")

  @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model request_files {
  request_file_id Int       @id @unique(map: "request_file_id") @default(autoincrement())
  user            Int?
  file_name       String?   @unique @db.VarChar(255)
  create_date     DateTime? @default(now()) @db.DateTime(0)
  users           users?    @relation(fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "request_files_ibfk_1")

  @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model request_statuses {
  status_id   Int        @id @unique(map: "status_id")
  status_name String     @db.VarChar(255)
  requests    requests[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model requests {
  req_id           Int              @unique(map: "req_id") @default(autoincrement())
  user             Int?
  request_status   Int
  request_type     Int
  approver         Int?
  description      String           @default("")
  date_update      DateTime         @default(now()) @db.DateTime(0)
  users            users?           @relation(fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "requests_ibfk_1")
  admins           admins?          @relation(fields: [approver], references: [admin_id], onDelete: NoAction, onUpdate: NoAction, map: "requests_ibfk_2")
  request_statuses request_statuses @relation(fields: [request_status], references: [status_id], onDelete: NoAction, onUpdate: NoAction, map: "requests_ibfk_3")

  @@id([req_id, request_status, date_update])
  @@index([approver], map: "approver")
  @@index([request_status], map: "request_status")
  @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model resetpass {
  resetpass_req_id                  Int       @id @unique(map: "resetpass_req_id") @default(autoincrement())
  user                              Int?
  user_email                        String?   @db.VarChar(255)
  token                             String?   @db.VarChar(255)
  expiration_time                   DateTime? @db.Time(0)
  users_resetpass_userTousers       users?    @relation("resetpass_userTousers", fields: [user], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "resetpass_ibfk_1")
  users_resetpass_user_emailTousers users?    @relation("resetpass_user_emailTousers", fields: [user_email], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "resetpass_ibfk_2")

  @@index([user], map: "user")
  @@index([user_email], map: "user_email")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model seals {
  seal_id     Int          @id @unique(map: "seal_id")
  seal_pix    String?      @unique @db.VarChar(255)
  departments departments?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sign_persons {
  sign_person_id     Int          @id @unique(map: "sign_person_id") @default(autoincrement())
  sign_person_pname  String?      @db.VarChar(100)
  sign_person_name   String?      @db.VarChar(255)
  sign_person_lname  String?      @db.VarChar(255)
  signature_pix      String?      @unique @db.VarChar(255)
  department         Int
  position           String?      @db.VarChar(255)
  sign_person_active Boolean
  departments        departments? @relation(fields: [department], references: [department_id], onDelete: NoAction, onUpdate: NoAction, map: "sign_persons_ibfk_1")

  @@index([department], map: "department")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  user_id                               Int                 @unique(map: "user_id") @default(autoincrement())
  username                              String              @unique @db.VarChar(255)
  password                              String              @db.VarChar(255)
  role                                  String              @default("user")
  pname_th                              String
  pname_other_th                        String              @db.VarChar(255)
  fname_th                              String              @db.VarChar(255)
  lname_th                              String              @db.VarChar(255)
  pname_en                              String
  pname_other_en                        String              @db.VarChar(255)
  fname_en                              String              @db.VarChar(255)
  lname_en                              String              @db.VarChar(255)
  birthday                              DateTime            @db.Date
  nationality                           Int
  blood                                 String
  work_number                           String
  private_number                        String
  email                                 String              @unique(map: "email") @db.VarChar(255)
  house_number1                         String              @db.VarChar(255)
  moo1                                  Int
  alley1                                String              @db.VarChar(255)
  road1                                 String              @db.VarChar(255)
  province1                             Int
  amphures1                             Int
  district1                             Int
  zip_code1                             Int
  house_number2                         String              @db.VarChar(255)
  moo2                                  String              @db.VarChar(255)
  alley2                                String              @db.VarChar(255)
  road2                                 String              @db.VarChar(255)
  province2                             Int
  amphures2                             Int
  district2                             Int
  zip_code2                             Int
  institution                           Int
  eposition                             Int
  position                              Int
  position_lv                           Int
  e_learning                            Int
  approve                               Boolean
  is_validate                           Boolean             @default(false)
  create_date                           DateTime            @default(now()) @db.DateTime(0)
  envocc_card_files                     envocc_card_files[]
  exp_files                             exp_files[]
  experiences                           experiences[]
  gov_card_files                        gov_card_files[]
  members                               members?
  photos                                photos[]
  request_files                         request_files[]
  requests                              requests[]
  resetpass_resetpass_userTousers       resetpass[]         @relation("resetpass_userTousers")
  resetpass_resetpass_user_emailTousers resetpass[]         @relation("resetpass_user_emailTousers")
  institutions                          institutions        @relation(fields: [institution], references: [institution_id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")
  positions                             positions           @relation(fields: [position], references: [position_id])
  position_lvs                          position_lvs        @relation(fields: [position_lv], references: [position_lv_id])
  epositions                            epositions          @relation(fields: [eposition], references: [eposition_id])

  @@id([username, email, user_id])
  @@index([institution], map: "institution")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model positions {
  position_id       Int      @id
  position_name     String?  @db.VarChar(100)
  position_name_eng String?  @db.VarChar(100)
  users             users[]
  admins            admins[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model position_lvs {
  position_lv_id       Int      @id
  position_lv_name     String?  @db.VarChar(100)
  position_lv_name_eng String?  @db.VarChar(100)
  users                users[]
  admins               admins[]
}
